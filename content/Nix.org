#+title: Nix

Como programadores, creo que todos hemos tenido algun encontronazo con los gestores de paquetes, ya sea para instalar un proyecto de python o tener que arreglar algún conflicto de paquetes en Linux.
La realidad es que no hay ninguna solución perfecta para la gestión de paquetes de nuestros proyectos, pero Nix es una de las mejores opciones.

En este articulo explicare que es Nix, como lo podemos utilizar para nuestros proyectos y en especifico como lo he usado para este proyecto.

* Que es Nix

En realidad Nix no es mas que un gestor de paquetes, con la peculiaridad de que se puede instalar en una gran variedad de sistemas (Distribuciones de Linux, MacOS, Windows con WSL)

La gran diferencia de Nix frente a otros gestores de paquetes es que funciona de una manera declarativa, utilizando expresiones escritas en el lenguaje Nix (al que me referiré como nixlang para poder diferenciarlos mejor) esto nos deja mantener una configuración versionada y estable sin tener que preocuparnos de paquetes huérfanos, dependencias y otros de los grandes problemas de los gestores de paquetes convencionales.

Otra diferencia con otros gestores de paquetes son las generaciones, una manera de mantener varias versiones de nuestros paquetes instaladas para que si una actualización los rompe, podamos volver a una generación anterior, donde las diferentes versiones de estas no tengan conflictos.

** Como instalarlo 

Para ver todas las opciones de instalación podemos ir a [[https://nixos.org/download/][nixos.org]], por ejemplo, para instalarlo en Linux podemos ejecutar el siguiente comando:

#+begin_src bash
  sh <(curl -L https://nixos.org/nix/install) --daemon
#+end_src

** Home manager

Home manager es una herramienta que nos ayuda a generar archivos de configuración a través de expresiones nix. Home manager nos deja especificar la configuración de programas y la instalación de estos para una gran variedad de entornos *nix como MacOS y Linux.

El gran problema de home manager es que no tiene control sobre el sistema, solo puede instalar paquetes y crear archivos de configuración.

* Configuración del sistema con nix

Una de las funciones mas útiles para nuestro día a día de nix es su habilidad de instalar y configurar paquetes de forma declarativa, en esta sección explicare como podemos administrar nuestro sistema con Nix, Home Manager y NixOS.

** Administración de paquetes

Para administrar paquetes de una forma declarativa y portable usaremos Home Manager.

#+begin_src nix
  {
    description = "Home managet test";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
    };

    outputs = inputs @ {
      self,
        home-manager,
        nixpkgs,
        ...
    }: rec {
      homeConfigurations = {
        "tu nombre de usuario" = home-manager.lib.homeManagerConfiguration {
          pkgs = nixpkgs.legacyPackages.x86_64-linux;

          home.packages = with pkgs; [
            # Los paquetes que quieras instalar
            vlc
            discord
          ];
        };
      };
    };
  }  
#+end_src

Aunque parezca un archivo bastante complejo, pero explicándolo paso a paso entenderemos las partes mas importantes.

*** Inputs

Las ~inputs~ o entradas son los archivos internos que nuestro flake utilizara, en este caso ~nixpkgs~ que es la colección de oficial paquetes para nix y ~home-manager~ es el modulo de Nix que nos deja configurar nuestro sistema de una forma declarativa en varios sistemas *nix.

*** Outputs

Los ~outputs~ o salidas son, en este caso las configuraciones de Home Manager que exporta; estas se exportan como ~homeConfigurations~. ~home-manager.lib.homeManagerConfiguration~ es la función que genera una configuración de Home Manager con los valores que especificamos.

** NixOS

NixOS resuelve los problemas de Home manager creando una distribución de linux que se controla totalmente desde nix, donde montas discos, que drivers usas y que procesos enciendes todo controlado desde nix.

* Ejemplo de expresión nix

Aquí propongo un ejemplo de expresión de nix utilizada para la configuración de nixos.

#+begin_src nix
  # Edit this configuration file to define what should be installed on
  # your system. Help is available in the configuration.nix(5) man page, on
  # https://search.nixos.org/options and in the NixOS manual (`nixos-help`).

  { config, lib, pkgs, ... }:

  {
    imports =
      [ # Include the results of the hardware scan.
        ./hardware-configuration.nix
      ];

    # Use the systemd-boot EFI boot loader.
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;

    # networking.hostName = "nixos"; # Define your hostname.
    # Pick only one of the below networking options.
    # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
    # networking.networkmanager.enable = true;  # Easiest to use and most distros use this by default.

    # Set your time zone.
    # time.timeZone = "Europe/Amsterdam";

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Select internationalisation properties.
    # i18n.defaultLocale = "en_US.UTF-8";
    # console = {
    #   font = "Lat2-Terminus16";
    #   keyMap = "us";
    #   useXkbConfig = true; # use xkb.options in tty.
    # };

    # Enable the X11 windowing system.
    services.xserver.enable = true;


    # Enable the GNOME Desktop Environment.
    services.xserver.displayManager.gdm.enable = true;
    services.xserver.desktopManager.gnome.enable = true;
    

    # Configure keymap in X11
    # services.xserver.xkb.layout = "us";
    # services.xserver.xkb.options = "eurosign:e,caps:escape";

    # Enable CUPS to print documents.
    # services.printing.enable = true;

    # Enable sound.
    # sound.enable = true;
    # hardware.pulseaudio.enable = true;

    # Enable touchpad support (enabled default in most desktopManager).
    # services.xserver.libinput.enable = true;

    # Define a user account. Don't forget to set a password with ‘passwd’.
    # users.users.alice = {
    #   isNormalUser = true;
    #   extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
    #   packages = with pkgs; [
    #     firefox
    #     tree
    #   ];
    # };

    # List packages installed in system profile. To search, run:
    # $ nix search wget
    # environment.systemPackages = with pkgs; [
    #   vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    #   wget
    # ];

    # Some programs need SUID wrappers, can be configured further or are
    # started in user sessions.
    # programs.mtr.enable = true;
    # programs.gnupg.agent = {
    #   enable = true;
    #   enableSSHSupport = true;
    # };

    # List services that you want to enable:

    # Enable the OpenSSH daemon.
    # services.openssh.enable = true;

    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # networking.firewall.enable = false;

    # Copy the NixOS configuration file and link it from the resulting system
    # (/run/current-system/configuration.nix). This is useful in case you
    # accidentally delete configuration.nix.
    # system.copySystemConfiguration = true;

    # This option defines the first version of NixOS you have installed on this particular machine,
    # and is used to maintain compatibility with application data (e.g. databases) created on older NixOS versions.
    #
    # Most users should NEVER change this value after the initial install, for any reason,
    # even if you've upgraded your system to a new NixOS release.
    #
    # This value does NOT affect the Nixpkgs version your packages and OS are pulled from,
    # so changing it will NOT upgrade your system.
    #
    # This value being lower than the current NixOS release does NOT mean your system is
    # out of date, out of support, or vulnerable.
    #
    # Do NOT change this value unless you have manually inspected all the changes it would make to your configuration,
    # and migrated your data accordingly.
    #
    # For more information, see `man configuration.nix` or https://nixos.org/manual/nixos/stable/options#opt-system.stateVersion .
    system.stateVersion = "23.11"; # Did you read the comment?

  }
#+end_src

* Flakes

Ejemplo del  que uso para configurar mi sistema.

#+begin_src nix
  {
    description = "deltav, my new system config";

    outputs = inputs @ {
      self,
        home-manager,
        nixpkgs,
        sops-nix,
        nixos-hardware,
        ...
    }: rec {
      nixosConfigurations = {
        "aceso" = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          specialArgs = {inherit inputs;};
          modules = [
            home-manager.nixosModules.home-manager
            {
              networking.hostName = "aceso";
            }
            hosts/aceso/aceso.nix
            sops-nix.nixosModules.sops
          ];
        };

        "castor" = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          specialArgs = {inherit inputs;};
          modules = [
            home-manager.nixosModules.home-manager
            {
              networking.hostName = "castor";
            }
            hosts/castor/castor.nix
            sops-nix.nixosModules.sops
          ];
        };

        "philoctetes" = nixpkgs.lib.nixosSystem {
          system = "aarch64-linux";
          specialArgs = {inherit inputs;};
          modules = [
            "${nixpkgs}/nixos/modules/installer/sd-card/sd-image-raspberrypi.nix"
            home-manager.nixosModules.home-manager
            {
              networking.hostName = "philoctetes";
              nixpkgs.config.allowUnsupportedSystem = true;
              nixpkgs.hostPlatform.system = "aarch64-linux";
              nixpkgs.buildPlatform.system = "x86_64-linux";
            }
            hosts/philoctetes/philoctetes.nix
            sops-nix.nixosModules.sops
            nixos-hardware.nixosModules.raspberry-pi-4
          ];
        };
      };

      images."philoctetes" = nixosConfigurations."philoctetes".config.system.build.sdImage;
    };

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
      zen-browser = {
        url = "github:0xc000022070/zen-browser-flake";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      apple-fonts.url = "github:Lyndeno/apple-fonts.nix";

      spicetify-nix = {
        url = "github:Gerg-L/spicetify-nix";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      # hyprland.url = "github:hyprwm/Hyprland";
      # hyprland-plugins = {
      #   url = "github:hyprwm/hyprland-plugins";
      #   inputs.hyprland.follows = "hyprland";
      # };

      sops-nix.url = "github:Mic92/sops-nix";

      firefox-gnome-theme = {
        url = "github:rafaelmardojai/firefox-gnome-theme";
        flake = false;
      };

      emacs-libvterm = {
        url = "github:akermu/emacs-libvterm";
        flake = false;
      };

      emacs-overlay = {
        url = "github:nix-community/emacs-overlay";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      suyu = {
        url = "github:Noodlez1232/suyu-flake";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      nixos-hardware = {
        url = "github:NixOS/nixos-hardware/master";
      };
    };
  }
#+end_src

